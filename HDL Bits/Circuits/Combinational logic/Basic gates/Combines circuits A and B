module A(input x, input y, output z);
    assign z = ~(x ^ y);
endmodule

module B(input x, input y, output z);
    assign z = (x ^ y) & x;
endmodule

// Top-level module
module top_module (
    input x,
    input y,
    output z
);

    wire a1, b1, a2, b2;
    wire res1, res2;

    // Instantiate modules
    A ua1 (.x(x), .y(y), .z(a1));
    B ub1 (.x(x), .y(y), .z(b1));
    A ua2 (.x(x), .y(y), .z(a2));
    B ub2 (.x(x), .y(y), .z(b2));

    // Intermediate operations
    assign res1 = a1 | b1;      
    assign res2 = a2 & b2;       
    // Final output using XOR
    assign z = (res1 ^ res2);   // XOR

endmodule
